# REGRAS DO SISTEMA - INVENTÁRIO E CADASTRO

## INSTRUÇÕES OBRIGATÓRIAS PARA DESENVOLVIMENTO

### 1. DOCUMENTAÇÃO
- Toda nova funcionalidade precisa ser registrada na documentação em /documentacao
- Atualizar a documentação conforme mudanças no sistema
- Descrever propósito, parâmetros e exemplos de uso

### 2. PADRÕES DE CÓDIGO
- As funções precisam ser escritas de forma clara e modular
- Utilizar TypeScript para tipagem estrita
- Criar components reutilizáveis para formulários
- Evitar lógica de negócio nos componentes — usar hooks separados
- Seguir convenções de nomenclatura consistentes

### 3. PERSISTÊNCIA DE DADOS
- Utilizar Supabase para todas as operações de banco de dados
- Implementar autenticação via Supabase Auth
- Garantir que todas as tabelas tenham relacionamentos adequados
- Implementar validação tanto no frontend quanto no backend

### 4. VALIDAÇÃO E UX
- Garantir que todos os formulários tenham validação
- Implementar feedback visual para ações do usuário
- Criar mensagens de erro claras e úteis
- Implementar loading states adequados

### 5. DESIGN E RESPONSIVIDADE ⭐ OBRIGATÓRIO
- O layout DEVE ser completamente responsivo para mobile, tablet e desktop
- Utilizar TailwindCSS para estilização com breakpoints:
  * Mobile first: classes base sem prefixo
  * sm: (≥640px) - tablets pequenos
  * md: (≥768px) - tablets
  * lg: (≥1024px) - desktops pequenos
  * xl: (≥1280px) - desktops grandes
- **PADRÕES OBRIGATÓRIOS DE RESPONSIVIDADE**:
  * Container principal: `p-3 sm:p-4 md:p-6 max-w-full overflow-x-hidden`
  * Cabeçalhos: `flex-col sm:flex-row sm:items-center sm:justify-between gap-4`
  * Botões: `flex-col sm:flex-row gap-2 sm:gap-3` com `justify-center` em mobile
  * Ícones: `w-4 h-4 sm:w-5 sm:h-5` com margem condicional `sm:mr-2`
  * Texto: `text-xs sm:text-sm` ou `text-sm sm:text-base`
  * Padding: `px-3 sm:px-4 md:px-6` e `py-2 sm:py-3 md:py-4`
  * Tabelas: Ocultar colunas menos importantes com `hidden md:table-cell`, `hidden lg:table-cell`, `hidden xl:table-cell`
  * Tabelas mobile: Mostrar informações secundárias inline na célula principal
  * Cards grid: `grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4`
  * Modais: `max-h-[90vh] sm:max-h-[85vh]` com padding responsivo
  * Toggle buttons: Ocultar texto em mobile com `hidden sm:inline`, mostrar apenas ícones
  * Sempre usar `min-w-0` e `truncate` para evitar overflow de texto
  * Sempre usar `flex-shrink-0` em ícones e badges para evitar compressão
- **PREVENÇÃO DE SCROLL HORIZONTAL**:
  * Adicionar `overflow-x-hidden` no container principal
  * Usar `min-w-0` em elementos flex para permitir shrinking
  * Aplicar `max-w-full` globalmente
  * Testar em telas de 320px, 640px, 768px, 1024px e 1280px
- Manter consistência visual em todos os componentes
- Cores: Usar palette slate para elementos principais
- Sombras: `shadow-sm` em botões, `shadow` em cards

### 6. ARQUITETURA E ORGANIZAÇÃO
- O código deve estar organizado em pastas por domínio:
  - /features/empresa
  - /features/colaborador  
  - /features/inventario
  - /features/auth
- Usar Context API ou Zustand para estado global
- Implementar roteamento protegido com React Router
- Separar lógica de apresentação da lógica de negócio

### 7. SEGURANÇA - ⚠️ CRÍTICO - OBRIGATÓRIO
- **NUNCA EXPOR DADOS SENSÍVEIS NO FRONTEND**: Jamais incluir chaves privadas, senhas, tokens secretos ou credenciais administrativas no código do frontend
- **USAR APENAS CHAVES PÚBLICAS**: No frontend, usar somente as chaves públicas (anon key) do Supabase
- **VARIÁVEIS DE AMBIENTE**: Sempre prefixar com VITE_ apenas dados que podem ser públicos
- **LOGS E CONSOLE PROIBIDOS**: 
  * Jamais fazer console.log() de URLs, tokens, emails ou senhas
  * Nunca logar responses completas de APIs
  * Desabilitar debug do Supabase em produção
  * Remover todos os console.log antes do deploy
- **URLs E ENDPOINTS**: Nunca expor URLs completas de APIs no console do navegador
- **TRATAMENTO DE ERROS**: Logs de erro devem ser genéricos, sem expor detalhes técnicos
- **ROW LEVEL SECURITY**: Sempre habilitar RLS no Supabase para proteger dados
- **VALIDAÇÃO DUPLA**: Validar tanto no frontend quanto no backend
- Implementar autenticação em todas as rotas protegidas
- Validar permissões de usuário antes de operações sensíveis
- Sanitizar inputs do usuário
- Implementar rate limiting quando necessário

### 8. PROCESSO DE DESENVOLVIMENTO
- Ler esse arquivo antes de escrever qualquer código novo
- Testar funcionalidades antes de marcar como concluída
- Manter commits organizados e descritivos
- Documentar decisões técnicas importantes

### 9. ESTRUTURA DE DADOS
- Tabelas principais: empresas, colaboradores, itens
- Implementar relacionamentos adequados entre tabelas
- Manter consistência nos campos de auditoria (created_at, updated_at)
- Utilizar UUIDs como chaves primárias

### 10. PERFORMANCE
- Implementar lazy loading quando apropriado
- Otimizar queries do Supabase
- Implementar cache quando necessário
- Minimizar re-renders desnecessários